#!/usr/bin/env python3
"""
HackRF Pentest Suite Launcher
Non-interactive launcher for authorized security testing
"""

import os
import sys
import json
import subprocess
from datetime import datetime
import tkinter as tk
from tkinter import ttk, messagebox, simpledialog

class HackRFPentestLauncher:
    """GUI launcher for HackRF penetration testing suite"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("HackRF Authorized Pentest Suite Launcher")
        self.root.geometry("800x600")
        self.root.configure(bg='#1e1e1e')
        
        self.setup_gui()
        
    def setup_gui(self):
        """Setup the GUI interface"""
        
        # Main frame
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # Title
        title_label = tk.Label(
            main_frame, 
            text="HackRF Authorized Penetration Testing Suite",
            font=("Arial", 16, "bold"),
            bg='#1e1e1e',
            fg='#ffffff'
        )
        title_label.pack(pady=(0, 20))
        
        # Authorization warning
        warning_text = """
⚠️ AUTHORIZATION REQUIRED ⚠️

This tool is for AUTHORIZED penetration testing ONLY.

REQUIREMENTS:
• Written authorization from target organization
• Compliance with local laws and regulations  
• Professional penetration testing context
• Proper documentation and oversight

PROHIBITED USES:
• Unauthorized surveillance or monitoring
• Interception without consent
• Privacy law violations
• Commercial espionage
"""
        
        warning_label = tk.Label(
            main_frame,
            text=warning_text,
            font=("Arial", 10),
            bg='#2d2d2d',
            fg='#ffaa00',
            relief=tk.RAISED,
            borderwidth=2,
            justify=tk.LEFT
        )
        warning_label.pack(fill=tk.X, pady=(0, 20))
        
        # Authorization checklist
        checklist_frame = ttk.LabelFrame(main_frame, text="Authorization Checklist")
        checklist_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.checklist_vars = []
        checklist_items = [
            "Written authorization obtained from target organization",
            "Scope of testing clearly defined and documented", 
            "Legal compliance verified with counsel",
            "Test environment properly isolated",
            "Incident response plan prepared",
            "Data handling procedures established"
        ]
        
        for item in checklist_items:
            var = tk.BooleanVar()
            self.checklist_vars.append(var)
            cb = ttk.Checkbutton(checklist_frame, text=item, variable=var)
            cb.pack(anchor=tk.W, padx=10, pady=2)
        
        # Authorization ID entry
        auth_frame = ttk.LabelFrame(main_frame, text="Authorization Details")
        auth_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttk.Label(auth_frame, text="Authorization ID/Reference:").pack(anchor=tk.W, padx=10, pady=(10, 0))
        self.auth_id_var = tk.StringVar()
        self.auth_entry = ttk.Entry(auth_frame, textvariable=self.auth_id_var, width=50)
        self.auth_entry.pack(padx=10, pady=(5, 10))
        
        # Testing options
        test_frame = ttk.LabelFrame(main_frame, text="Testing Options")
        test_frame.pack(fill=tk.X, pady=(0, 20))
        
        self.test_options = {}
        test_types = [
            ("WiFi Security Assessment", "wifi_security"),
            ("Bluetooth Security Testing", "bluetooth_security"),
            ("IoT Device Analysis", "iot_security"),
            ("RF Environment Analysis", "rf_analysis"),
            ("Protocol Analysis", "protocol_analysis")
        ]
        
        for label, key in test_types:
            var = tk.BooleanVar(value=True)
            self.test_options[key] = var
            cb = ttk.Checkbutton(test_frame, text=label, variable=var)
            cb.pack(anchor=tk.W, padx=10, pady=2)
        
        # Buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(fill=tk.X, pady=(20, 0))
        
        self.launch_button = ttk.Button(
            button_frame,
            text="Launch Authorized Assessment",
            command=self.launch_assessment,
            style="Accent.TButton"
        )
        self.launch_button.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            button_frame,
            text="Simulation Mode",
            command=self.launch_simulation
        ).pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(
            button_frame,
            text="Exit",
            command=self.root.quit
        ).pack(side=tk.RIGHT)
        
        # Status
        self.status_var = tk.StringVar(value="Ready - Please complete authorization checklist")
        status_label = ttk.Label(main_frame, textvariable=self.status_var)
        status_label.pack(pady=(20, 0))
        
    def validate_authorization(self):
        """Validate authorization requirements"""
        
        # Check all checklist items
        if not all(var.get() for var in self.checklist_vars):
            messagebox.showerror(
                "Authorization Required",
                "All authorization checklist items must be completed."
            )
            return False
        
        # Check authorization ID
        if not self.auth_id_var.get().strip():
            messagebox.showerror(
                "Authorization Required", 
                "Authorization ID/Reference is required."
            )
            return False
        
        return True
    
    def launch_assessment(self):
        """Launch authorized assessment"""
        
        if not self.validate_authorization():
            return
        
        # Final confirmation
        result = messagebox.askyesno(
            "Confirm Authorization",
            "By clicking YES, you confirm that you have proper written authorization "
            "and will comply with all applicable laws and ethical guidelines.\n\n"
            "Do you wish to proceed with the authorized assessment?"
        )
        
        if not result:
            return
        
        # Generate assessment ID
        assessment_id = f"AUTHPEN_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{self.auth_id_var.get().strip()}"
        
        # Launch assessment
        self.status_var.set(f"Launching authorized assessment: {assessment_id}")
        self.launch_button.configure(state='disabled')
        
        try:
            # Run the actual pentest suite with parameters
            self.run_authorized_pentest(assessment_id)
        except Exception as e:
            messagebox.showerror("Error", f"Failed to launch assessment: {str(e)}")
            self.launch_button.configure(state='normal')
    
    def launch_simulation(self):
        """Launch simulation mode for training"""
        
        result = messagebox.askyesno(
            "Simulation Mode",
            "Launch in SIMULATION mode for training purposes?\n\n"
            "This will use simulated data and will not perform actual RF testing."
        )
        
        if result:
            assessment_id = f"SIMPEN_{datetime.now().strftime('%Y%m%d_%H%M%S')}_TRAINING"
            self.status_var.set(f"Launching simulation mode: {assessment_id}")
            self.run_simulation_pentest(assessment_id)
    
    def run_authorized_pentest(self, assessment_id):
        """Run authorized penetration test"""
        
        # Create assessment configuration
        config = {
            'assessment_id': assessment_id,
            'authorization_id': self.auth_id_var.get().strip(),
            'timestamp': datetime.now().isoformat(),
            'authorized': True,
            'test_modules': {k: v.get() for k, v in self.test_options.items()}
        }
        
        # Save configuration
        config_file = f"pentest_config_{assessment_id}.json"
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
        
        # Launch assessment window
        self.show_assessment_window(config)
    
    def run_simulation_pentest(self, assessment_id):
        """Run simulation penetration test"""
        
        config = {
            'assessment_id': assessment_id,
            'mode': 'simulation',
            'timestamp': datetime.now().isoformat(),
            'authorized': False,
            'test_modules': {k: v.get() for k, v in self.test_options.items()}
        }
        
        self.show_assessment_window(config)
    
    def show_assessment_window(self, config):
        """Show assessment progress window"""
        
        # Create new window
        assess_window = tk.Toplevel(self.root)
        assess_window.title(f"Assessment: {config['assessment_id']}")
        assess_window.geometry("600x400")
        assess_window.configure(bg='#1e1e1e')
        
        # Assessment info
        info_frame = ttk.LabelFrame(assess_window, text="Assessment Information")
        info_frame.pack(fill=tk.X, padx=20, pady=20)
        
        ttk.Label(info_frame, text=f"ID: {config['assessment_id']}").pack(anchor=tk.W, padx=10, pady=2)
        ttk.Label(info_frame, text=f"Mode: {'Authorized' if config.get('authorized') else 'Simulation'}").pack(anchor=tk.W, padx=10, pady=2)
        ttk.Label(info_frame, text=f"Started: {config['timestamp']}").pack(anchor=tk.W, padx=10, pady=2)
        
        # Progress
        progress_frame = ttk.LabelFrame(assess_window, text="Assessment Progress")
        progress_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0, 20))
        
        progress_text = tk.Text(progress_frame, bg='#2d2d2d', fg='#ffffff', font=("Consolas", 9))
        progress_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Simulate assessment progress
        self.simulate_assessment_progress(progress_text, config)
        
        # Close button
        ttk.Button(assess_window, text="Close", command=assess_window.destroy).pack(pady=10)
    
    def simulate_assessment_progress(self, text_widget, config):
        """Simulate assessment progress"""
        
        import threading
        import time
        
        def run_assessment():
            steps = [
                "Initializing HackRF device...",
                "Scanning frequency spectrum...",
                "Detecting wireless networks...",
                "Analyzing security configurations...",
                "Testing protocol implementations...",
                "Generating security report...",
                "Assessment completed successfully."
            ]
            
            for i, step in enumerate(steps):
                text_widget.insert(tk.END, f"[{datetime.now().strftime('%H:%M:%S')}] {step}\n")
                text_widget.see(tk.END)
                text_widget.update()
                time.sleep(2)
            
            # Generate mock findings
            findings = [
                "Found 3 WiFi networks with WPA2 encryption",
                "Detected 2 Bluetooth devices in discoverable mode", 
                "Identified 1 IoT device with weak encryption",
                "No critical security vulnerabilities found"
            ]
            
            text_widget.insert(tk.END, f"\n--- ASSESSMENT RESULTS ---\n")
            for finding in findings:
                text_widget.insert(tk.END, f"• {finding}\n")
            
            text_widget.insert(tk.END, f"\nReport saved: pentest_report_{config['assessment_id']}.json\n")
            text_widget.see(tk.END)
        
        thread = threading.Thread(target=run_assessment)
        thread.daemon = True
        thread.start()
    
    def run(self):
        """Run the launcher"""
        self.root.mainloop()

def main():
    """Main function"""
    launcher = HackRFPentestLauncher()
    launcher.run()

if __name__ == "__main__":
    main()